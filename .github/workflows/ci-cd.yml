name: CI/CD Pipeline for Playwright (Java, TestNG, Allure, Logback)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java (replace with your desired Java version)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21.0.1' # Use the Java version your project requires
          distribution: 'temurin'

      # Step 4: Install Playwright and system dependencies
      - name: Install Playwright dependencies
        run: |
          npm install -g playwright
          npx playwright install --with-deps

#      - name: Install dependencies
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y \
#            libnss3 \
#            libnspr4 \
#            libatk1.0-0 \
#            libatk-bridge2.0-0 \
#            libcups2 \
#            libdrm2 \
#            libxkbcommon0 \
#            libxcomposite1 \
#            libxdamage1 \
#            libxfixes3 \
#            libxrandr2 \
#            libgbm1 \
#            libasound2t64 \  # Use libasound2t64 instead of libasound2
#            libatspi2.0-0 \
#            libxshmfence1

      # Step 3: Cache Maven dependencies to speed up builds
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}-${{ hashFiles('**/src/**') }}
          restore-keys: |
            maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}-
            maven-${{ runner.os }}-

      # Step 4: Build the project and run tests
      - name: Build and run tests with Maven
        run: mvn clean test -Dsurefire.suiteXmlFiles=src/test/resources/testRunners/testig_regressions.xml -Dallure.results.directory=target/allure-results
     # -Dsurefire.failIfNoTests=false

      # Step 5: Generate Allure report
      - name: Generate Allure report
        run: mvn allure:report

      # Step 6: Upload Allure report as an artifact
      - name: Upload Allure report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: target/site/allure-maven-plugin

      # Publish the Allure Report to GitHub Pages
      - name: Deploy Allure Report to GitHub Pages
#        if: github.ref == 'refs/heads/main' # Only deploy on the main branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GH_PAT }}
          publish_dir: target/site/allure-maven-plugin